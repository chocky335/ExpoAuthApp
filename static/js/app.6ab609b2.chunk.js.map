{"version":3,"sources":["context/AuthService.tsx","hooks/useColorScheme.ts","constants/Colors.ts","components/Themed.tsx","components/StyledText.tsx","components/StyledButton.tsx","components/AuthButton.tsx","screens/NotAuthorized.tsx","hooks/useEmail.ts","screens/Authorized.tsx","navigation/LinkingConfiguration.ts","navigation/index.tsx","App.tsx","hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["AuthContext","React","createContext","state","startOAuth","authorizeSucceed","authorizeFailed","logout","AuthProvider","children","useState","provider","setProvider","error","setError","token","setToken","useCallback","authValue","JSON","stringify","Platform","OS","AsyncStorage","setItem","SecureStore","removeItem","useEffect","presistHandler","persistedValue","parse","getItem","then","contextValue","isLoading","mapStateToContext","Provider","value","Consumer","useColorScheme","_useColorScheme","light","text","background","tint","button","buttonTint","loading","dark","useThemeColor","props","colorName","theme","colorFromProps","Colors","Text","style","lightColor","darkColor","otherProps","color","View","backgroundColor","MonoText","fontFamily","PrimaryButton","disabled","onPress","title","colorScheme","colorStyle","useMemo","colorTextStyle","loadingColor","TouchableOpacity","styles","container","ActivityIndicator","StyleSheet","create","padding","minWidth","justifyContent","alignItems","AuthButton","authConfig","authHook","successCallback","errorCallback","request","response","promptAsync","type","toUpperCase","authentication","message","WebBrowser","googleAuthConfig","androidClientId","env","GOOGLE_ANDROID_ID","webClientId","GOOGLE_WEB_ID","facebookAuthConfig","clientId","FACEBOOK_ID","responseType","ResponseType","Token","NotAuthorizedScreen","authContext","useContext","loadingProvider","selectorLoadingProvider","isFacebookLoading","isGoogleLoading","selectorError","separator","Google","Facebook","flex","fontSize","fontWeight","marginVertical","height","width","fetchGoogleEmail","fetch","fetchFacebookEmail","AuthorizedScreen","email","authState","setEmail","accessToken","res","json","useEmail","link","marginTop","paddingVertical","linkText","linking","prefixes","Linking","config","screens","Authorized","NotAuthorized","Navigation","NavigationContainer","LinkingConfiguration","DarkTheme","DefaultTheme","RootNavigator","Stack","createNativeStackNavigator","isAuth","selectorIsAuth","Navigator","Screen","name","component","options","AuthorizeScreen","App","isLoadingComplete","setLoadingComplete","SplashScreen","Font","FontAwesome","font","require","e","console","warn","loadResourcesAndDataAsync","useCachedResources","StatusBar","module","exports"],"mappings":"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","file":"static/js/app.6ab609b2.chunk.js","sourcesContent":["import { TokenResponse } from \"expo-auth-session\";\nimport * as SecureStore from 'expo-secure-store';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Platform } from \"react-native\";\n\nexport type SupportedProvider = 'facebook' | 'google'\n\ninterface AuthorizingData<Provider = SupportedProvider> {\n    provider: Provider,\n    isLoading: true\n}\ninterface AuthorizedData<Provider = SupportedProvider> {\n    provider: Provider,\n    token: TokenResponse,\n    isLoading: boolean\n}\ninterface FailedAuthorizingData<Provider = SupportedProvider> {\n    provider: Provider,\n    error: string,\n    isLoading: false\n}\ntype AuthorizeData<Provider = SupportedProvider> =\n    AuthorizingData<Provider>\n    | AuthorizedData<Provider>\n    | FailedAuthorizingData<Provider>\n    | null\n    | 'init'\n\ntype AuthorizeContext<Provider = SupportedProvider> = {\n    state: AuthorizeData<Provider>,\n    startOAuth: (provider: Provider) => void,\n    authorizeSucceed: (token: TokenResponse) => void,\n    authorizeFailed: (error: string) => void,\n    logout: () => void,\n}\n\nconst defaultAuth = {\n    state: null,\n    startOAuth: () => {},\n    authorizeSucceed: () => {},\n    authorizeFailed: () => {},\n    logout: () => {},\n}\n\nconst AuthContext = React.createContext<AuthorizeContext>(defaultAuth);\n\nconst mapStateToContext = ({\n    provider, error, token\n}: {\n    provider: SupportedProvider | null,\n    error: string | null,\n    token: TokenResponse | null,\n}): AuthorizeContext['state'] => {\n    if (provider && error) {\n        return {\n            provider,\n            error,\n            isLoading: false\n        }\n    }\n\n    if (provider && token) {\n        return {\n            token,\n            provider,\n            isLoading: false\n        }\n    }\n\n    if (provider) {\n        return {\n            provider,\n            isLoading: true\n          }\n    }\n\n    return null\n}\nconst AUTH_STORE_KEY = '__Auth';\n\nexport const AuthProvider = ({ children }: React.PropsWithChildren) => {\n  const [provider, setProvider] = useState<SupportedProvider | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [token, setToken] = useState<TokenResponse | null>(null);\n\n  const authorizeSucceed = useCallback((token: TokenResponse) => {\n    const authValue = JSON.stringify({provider, token});\n    \n    if (Platform.OS === 'web') {\n        AsyncStorage.setItem(AUTH_STORE_KEY, authValue)\n    } else {\n        SecureStore.setItemAsync(AUTH_STORE_KEY, authValue);\n    }\n\n    setToken(token)\n  }, [provider]);\n\n  const logout = useCallback(() => {\n    if (Platform.OS === 'web') {\n        AsyncStorage.removeItem(AUTH_STORE_KEY)\n    } else {\n        SecureStore.deleteItemAsync(AUTH_STORE_KEY);\n    }\n\n    setToken(null)\n    setProvider(null)\n    setError(null)\n  }, []);\n\n\n  useEffect(() => {\n    const presistHandler = (persistedValue: string | null) => {\n        if (persistedValue) {\n            const {provider, token} = JSON.parse(persistedValue)\n            setProvider(provider)\n            setToken(token)\n        }\n    }\n\n    if (Platform.OS === 'web') {\n        AsyncStorage.getItem(AUTH_STORE_KEY).then(presistHandler)\n    } else {\n        SecureStore.getItemAsync(AUTH_STORE_KEY).then(presistHandler)\n    }\n  }, [])\n\n\n  const contextValue = mapStateToContext({ provider, error, token })\n\n  return (\n    <AuthContext.Provider value={{\n        state: contextValue,\n        startOAuth: setProvider,\n        authorizeSucceed,\n        authorizeFailed: setError,\n        logout\n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const AuthConsumer = AuthContext.Consumer;\nexport const selectorIsAuth = ({state}: AuthorizeContext<SupportedProvider>) => state && state !== 'init' && 'token' in state\nexport const selectorIsLoading = ({state}: AuthorizeContext<SupportedProvider>) => state === 'init' || state?.isLoading\nexport const selectorLoadingProvider = ({state}: AuthorizeContext<SupportedProvider>): SupportedProvider | null => state && state !== 'init' && 'isLoading' in state && state.isLoading\n    ? state.provider\n    : null\nexport const selectorError = ({state}: AuthorizeContext<SupportedProvider>): string | null => state && state !== 'init' && 'error' in state\n    ? state.error\n    : null\n\nexport default AuthContext;","import { ColorSchemeName, useColorScheme as _useColorScheme } from 'react-native';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\nconst buttonColorLight = '#03DAC5';\nconst buttonColorDark = '#6200EE';\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    button: buttonColorLight,\n    buttonTint: '#000',\n    loading: '#fff',\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    button: buttonColorDark,\n    buttonTint: '#fff',\n    loading: '#fff',\n  },\n};\n","/**\n * Learn more about Light and Dark modes:\n * https://docs.expo.io/guides/color-schemes/\n */\n\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import { Text, TextProps } from './Themed';\n\nexport function MonoText(props: TextProps) {\n  return <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} />;\n}\n","import { ActivityIndicator, StyleSheet, TouchableOpacity } from 'react-native';\n\nimport Colors from '../constants/Colors';\n\nimport React, { useMemo } from 'react';\nimport useColorScheme from '../hooks/useColorScheme';\nimport { MonoText } from './StyledText';\n\n\ninterface Props {\n  isLoading?: boolean\n  disabled?: boolean\n  onPress?: () => void\n  title: string\n}\n\nexport default function PrimaryButton({\n  disabled,\n  isLoading,\n  onPress,\n  title\n}: Props) {\n  const colorScheme = useColorScheme()\n  const colorStyle = useMemo(() => ({\n    backgroundColor: colorScheme === 'dark' ? Colors.dark.button : Colors.light.button\n  }), [colorScheme])\n  const colorTextStyle = useMemo(() => ({\n    color: colorScheme === 'dark' ? Colors.dark.buttonTint : Colors.light.buttonTint\n  }), [colorScheme])\n  const loadingColor = useMemo(() => colorScheme === 'dark' ? Colors.dark.loading : Colors.light.loading, [colorScheme])\n\n\n  if (isLoading) {\n    return (\n      <TouchableOpacity disabled style={[styles.container,colorStyle]}>\n        <ActivityIndicator color={loadingColor} />\n      </TouchableOpacity>\n    );\n  }\n\n  return (\n    <TouchableOpacity disabled={disabled} onPress={onPress} style={[styles.container,colorStyle]}>\n      <MonoText style={colorTextStyle}>{title}</MonoText>\n    </TouchableOpacity>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 20,\n    minWidth: '30%',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n});\n","\nimport { StyleSheet } from 'react-native';\n\nimport Colors from '../constants/Colors';\n\nimport * as Facebook from 'expo-auth-session/providers/facebook';\nimport * as Google from 'expo-auth-session/providers/google';\nimport React from 'react';\nimport { TokenResponse } from 'expo-auth-session';\n\nimport PrimaryButton from './StyledButton';\n\ninterface Props<Provider = 'facebook' | 'google'> {\n  isLoading?: boolean\n  provider: Provider\n  authConfig?: Provider extends 'facebook'\n    ? Partial<Facebook.FacebookAuthRequestConfig>\n    : Partial<Google.GoogleAuthRequestConfig>\n  authHook: Provider extends 'facebook'\n    ? typeof Facebook.useAuthRequest\n    : typeof Google.useAuthRequest\n  successCallback: (result: TokenResponse) => void\n  errorCallback: (err: string) => void\n  startOAuth: (provider: Provider) => void\n}\n\nexport default function AuthButton({\n  provider,\n  authConfig,\n  authHook,\n  successCallback,\n  errorCallback,\n  isLoading,\n  startOAuth\n}: Props) {\n  const [request, response, promptAsync] = authHook(authConfig);\n\n  React.useEffect(() => {\n    if (response?.type === 'dismiss' || response?.type === 'cancel') {\n      errorCallback(`${provider.toUpperCase()} Authentication was ${response?.type}ed`)\n    }\n    if (response?.type === 'success' && response.authentication) {\n      successCallback(response.authentication)\n    }\n    if (response?.type === 'error' && response.error) {\n      errorCallback(response.error.message)\n    }\n  }, [response]);\n  const onPress = React.useCallback(() => {\n    startOAuth(provider)\n    promptAsync()\n  }, [provider, startOAuth, promptAsync]);\n\n\n  return (\n    <PrimaryButton isLoading={isLoading} disabled={!request} onPress={onPress} title={`Login with ${provider}`} />\n  );\n}\n\nconst styles = StyleSheet.create({\n  text: {\n    color: Colors.light.buttonTint\n  },\n});\n","import React, { useContext } from 'react';\nimport { Platform, StyleSheet } from 'react-native';\n\nimport * as WebBrowser from 'expo-web-browser';\nimport * as Facebook from 'expo-auth-session/providers/facebook';\nimport * as Google from 'expo-auth-session/providers/google';\nimport { ResponseType } from 'expo-auth-session';\n\nimport AuthButton from '../components/AuthButton';\nimport { View } from '../components/Themed';\nimport { RootStackScreenProps } from '../types';\nimport env from '../env.json';\nimport AuthContext, { selectorError, selectorLoadingProvider } from '../context/AuthService';\nimport { MonoText } from '../components/StyledText';\n\n\nWebBrowser.maybeCompleteAuthSession();\n\n\nconst googleAuthConfig = {\n  androidClientId: env.GOOGLE_ANDROID_ID,\n  webClientId: env.GOOGLE_WEB_ID,\n}\nconst facebookAuthConfig = {\n  clientId: env.FACEBOOK_ID,\n  responseType: ResponseType.Token,\n}\n\nexport default function NotAuthorizedScreen({}: RootStackScreenProps<'NotAuthorized'>) {\n  const authContext = useContext(AuthContext)\n  const {authorizeSucceed, authorizeFailed, startOAuth} = authContext\n  const loadingProvider = selectorLoadingProvider(authContext)\n  const isFacebookLoading = loadingProvider === 'facebook'\n  const isGoogleLoading = loadingProvider === 'google'\n  const error = selectorError(authContext)\n\n  React.useEffect(() => {\n    if (Platform.OS !== 'web') WebBrowser.warmUpAsync();\n\n    return () => {\n      if (Platform.OS !== 'web') WebBrowser.coolDownAsync();\n    };\n  }, []);\n\n\n  return (\n    <View style={styles.container}>\n      {error && <MonoText>Error: {error}</MonoText>}\n      {error && <View style={styles.separator} />}\n      <AuthButton\n        provider=\"google\"\n        authConfig={googleAuthConfig}\n        authHook={Google.useAuthRequest}\n        successCallback={authorizeSucceed}\n        errorCallback={authorizeFailed}\n        startOAuth={startOAuth}\n        isLoading={isGoogleLoading}\n      />\n\n      <View style={styles.separator} />\n\n      <AuthButton\n        provider=\"facebook\"\n        authConfig={facebookAuthConfig}\n        authHook={Facebook.useAuthRequest}\n        successCallback={authorizeSucceed}\n        errorCallback={authorizeFailed}\n        startOAuth={startOAuth}\n        isLoading={isFacebookLoading}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { useContext, useEffect, useState } from 'react';\nimport AuthContext from '../context/AuthService';\n\nconst fetchGoogleEmail = (token: string) => fetch(`https://www.googleapis.com/oauth2/v3/userinfo?access_token=${token}`)\nconst fetchFacebookEmail = (token: string) => fetch(`https://graph.facebook.com/me?fields=email,name&access_token=${token}`)\n\nexport default function useEmail(): string | null {\n  const { state: authState } = useContext(AuthContext)\n  const [email, setEmail] = useState(null)\n\n  useEffect(() => {\n    if (authState && authState !== 'init' && 'token' in authState) {\n      const emailFetch = authState.provider === 'google' ? fetchGoogleEmail : fetchFacebookEmail\n\n      emailFetch(authState.token.accessToken)\n        .then(res => res.json())\n        .then(res => setEmail(res.email))\n    }\n  }, [])\n\n  return email\n}\n","import { useContext } from 'react';\nimport { StyleSheet } from 'react-native';\nimport PrimaryButton from '../components/StyledButton';\nimport { MonoText } from '../components/StyledText';\n\nimport { View } from '../components/Themed';\nimport AuthContext from '../context/AuthService';\nimport useEmail from '../hooks/useEmail';\nimport { RootStackScreenProps } from '../types';\n\nexport default function AuthorizedScreen({}: RootStackScreenProps<'Authorized'>) {\n  const email = useEmail()\n  const {state, logout} = useContext(AuthContext)\n  const provider = state && typeof state !== 'string' && state.provider || ''\n\n  return (\n    <View style={styles.container}>\n      <MonoText>Provider: {provider}</MonoText>\n      <MonoText>{email}</MonoText>\n      <PrimaryButton onPress={logout} title={'Logout'} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","/**\n * Learn more about deep linking with React Navigation\n * https://reactnavigation.org/docs/deep-linking\n * https://reactnavigation.org/docs/configuring-links\n */\n\nimport { LinkingOptions } from '@react-navigation/native';\nimport * as Linking from 'expo-linking';\n\nimport { RootStackParamList } from '../types';\n\nconst linking: LinkingOptions<RootStackParamList> = {\n  prefixes: [Linking.createURL('/'), 'http://localhost:19006', 'https://chocky335.xyz', 'expoauthapp://'],\n  config: {\n    screens: {\n      Authorized: 'dash',\n      NotAuthorized: 'welcome',\n    },\n  },\n};\n\nexport default linking;\n","/**\n * If you are not familiar with React Navigation, refer to the \"Fundamentals\" guide:\n * https://reactnavigation.org/docs/getting-started\n *\n */\nimport { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport * as React from 'react';\nimport { ColorSchemeName } from 'react-native';\n\nimport NotAuthorizedScreen from '../screens/NotAuthorized';\nimport AuthorizeScreen from '../screens/Authorized';\nimport { RootStackParamList } from '../types';\nimport LinkingConfiguration from './LinkingConfiguration';\nimport AuthContext, { selectorIsAuth, selectorIsLoading } from '../context/AuthService';\n\n\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n/**\n * A root stack navigator is often used for displaying modals on top of all other content.\n * https://reactnavigation.org/docs/modal\n */\nconst Stack = createNativeStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  const authState = React.useContext(AuthContext)\n  const isAuth = selectorIsAuth(authState)\n\n  return (\n    <Stack.Navigator>\n      {!isAuth && <Stack.Screen name=\"NotAuthorized\" component={NotAuthorizedScreen} options={{ title: 'Please authorize' }} />}\n      {isAuth && <Stack.Screen name=\"Authorized\" component={AuthorizeScreen} options={{ title: 'Authorized' }} />}\n    </Stack.Navigator>\n  );\n}\n","import { StatusBar } from 'expo-status-bar';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { AuthProvider } from './context/AuthService';\n\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Navigation from './navigation';\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <SafeAreaProvider>\n        <AuthProvider>\n          <Navigation colorScheme={colorScheme} />\n        </AuthProvider>\n        <StatusBar />\n      </SafeAreaProvider>\n    );\n  }\n}\n","import { FontAwesome } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { useEffect, useState } from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...FontAwesome.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}